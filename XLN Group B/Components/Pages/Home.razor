@page "/"
@layout Layout.MainLayout
@using Microsoft.Bot.Connector.DirectLine
@using System.Threading.Tasks
@using Azure
@using Microsoft.Bot.Connector
@using Microsoft.Bot.Connector.Authentication
@using System

<PageTitle>Home</PageTitle>
<div class="container">
    <div class="row justify-content-center pt-5 pb-5">
        <div class="col-md-5 rounded shadow" style="background-color: white;">
            <div class="content p-3">
                <div class="row pt-5" >
                    <img src="assets/call_center_agent.png">
                </div>
                <div class="row pt-5">
                    <h1><strong>Welcome to XLN Support</strong></h1>
                    <p style="font-size: 22px">
                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                        Sed efficitur libero et orci vulputate gravida. In eget pulvinar ante.
                        Nunc fringilla nisi vitae dui euismod, non pretium est mollis. Nulla. 
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-md-1"></div>

        <div class="col-md-5 rounded shadow" style="background: white">
            <iframe src='https://webchat.botframework.com/embed/XLNBotGroupB-bot?s=z645DlF3yHk.rrAh8wFvHKeYA_KxrU3ObNNebI1R3jxYw8q8HQJmWcc'  style='min-width: 400px; width: 100%; min-height: 500px; height: 700px'></iframe>
        </div>
    </div>
</div>

@code {
    //popup logic
    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }


    string directLineSecret = "7Y0xAiT3CWM.mKNBL5XyLw3TloHP2RDvgJlrvkAcpyvVJZVJr9rxzlE";
    string botEndpoint = "https://XLN-bot-eeda.azurewebsites.net/api/messages";
    string userMessage = "";
    List<string> messages = new List<string>();
    DirectLineClient client;
    Conversation conversation;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            client = new DirectLineClient(directLineSecret);
            conversation = await client.Conversations.StartConversationAsync();

            if (conversation != null)
            {
                Console.WriteLine($"Conversation initialized. ID: {conversation.ConversationId}");
                // Start receiving messages from the bot
                _ = Task.Run(async () => await ReceiveMessages());
            }
            else
            {
                Console.WriteLine("Failed to initialize conversation.");
                // Handle the error or provide user feedback as needed
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while initializing: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }

        //Initial event 'ping' in order to recieve welcome message
        await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
            {
                From = new ChannelAccount("User"),
                Text = "",
                Type = ActivityTypes.Event
            });
    }

    async Task SendMessage()
    {
        try
        {
            Console.WriteLine("SendMessage method invoked."); // Debug message

            if (string.IsNullOrWhiteSpace(userMessage))
            {
                Console.WriteLine("User message is empty or whitespace."); // Debug message
                return;
            }

            messages.Add($"You: {userMessage}");

            if (conversation == null)
            {
                conversation = await client.Conversations.StartConversationAsync();
            }

            if (conversation != null)
            {
                Console.WriteLine($"Sending message: '{userMessage}'"); // Debug message
                await client.Conversations.PostActivityAsync(conversation.ConversationId, new Activity
                    {
                        From = new ChannelAccount("User"),
                        Text = userMessage,
                        Type = ActivityTypes.Message
                    });
            }
            else
            {
                Console.WriteLine("Conversation is still not initialized."); // Debug message

            }

            userMessage = ""; // Clear the input field after sending
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while sending the message: {ex.Message}"); // Log error

        }
    }

    async Task ReceiveMessages()
    {
        Console.WriteLine("ReceiveMessages method invoked."); // Debug message
        try
        {
            if (conversation == null)
            {
                // If conversation is not initialized, start a new one
                conversation = await client.Conversations.StartConversationAsync();
            }

            var watermark = "";
            while (true)
            {
                var activities = await client.Conversations.GetActivitiesAsync(conversation.ConversationId, watermark);
                watermark = activities.Watermark;

                foreach (var activity in activities.Activities)
                {
                    if (activity.From.Name == "XLN-bot" && activity.Type == ActivityTypes.Message)
                    {
                        //Add the bot's message to the messages list immediately
                        AddBotMessage(activity.Text);
                    }
                }

                //Updates ui
                StateHasChanged();


                // await Task.Delay(0);
                await Task.Delay(3000);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while receiving messages: {ex.Message}");
            // Handle the error or provide user feedback as needed
        }
    }

    void AddBotMessage(string message)
    {
        messages.Add($"Bot: {message}");
    }
}

